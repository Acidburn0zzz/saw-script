import "imports.cry";

let identity_spec n : CrucibleSetup () = do {
  crucible_execute_func [crucible_term n];
  crucible_return (crucible_term n);
};

let example_spec : CrucibleSetup () = do {
  crucible_execute_func [];
  crucible_return (crucible_term {{3:[32]}});
};

let alloc_init ty v = do {
    p <- crucible_alloc ty;
    crucible_points_to p v;
    return p;
};

let ptr_to_fresh n ty = do {
    x <- crucible_fresh_var n ty;
    p <- alloc_init ty (crucible_term x);
    return (x, p);
};

let sum_spec n : CrucibleSetup() = do {
  (arr,arrp) <- ptr_to_fresh "arr" (llvm_array n (llvm_int 32));

  crucible_execute_func[arrp, crucible_term {{ `n:[32]}}];
  crucible_return (crucible_term {{ mysum arr }});
};

let example_sums : CrucibleSetup() = do {
  crucible_execute_func[];
  crucible_return (crucible_term {{ 70:[32] }});
};

let main : TopLevel () = do {

    load_crucible_llvm_module "source.bc";
    id1 <- crucible_llvm_verify "identity" [] false (identity_spec {{1:[32]}}) abc;
    id2 <- crucible_llvm_verify "identity" [] false (identity_spec {{2:[32]}}) abc;
    crucible_llvm_verify "example"     [id1,id2] false example_spec z3;
    //crucible_llvm_verify "bad_example" [id1,id2] false example_spec (do { print_goal; assume_unsat; });

    sum6  <- crucible_llvm_verify "sum" [] false (sum_spec  6) z3;
    sum10 <- crucible_llvm_verify "sum" [] false (sum_spec 10) z3;
    crucible_llvm_verify "example_sums" [sum6,sum10] false example_sums z3;
    print "done";
};
