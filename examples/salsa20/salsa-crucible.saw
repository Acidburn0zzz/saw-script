import "Salsa20.cry";

let alloc_init ty v = do {
    p <- crucible_alloc ty;
    crucible_points_to p (crucible_term v);
    return p;
};

let ptr_to_fresh n ty = do {
    x <- crucible_fresh_var n ty;
    p <- alloc_init ty x;
    return (x, p);
};

let oneptr_update_func n ty f = do {
    (x, p) <- ptr_to_fresh n ty;
    crucible_execute_func [p];
    crucible_points_to p (crucible_term {{ f x }});
};

let quarterround_setup : CrucibleSetup () = do {
    //ys <- crucible_fresh_var "ys" (llvm_array 4 (llvm_int 32));
    y0 <- crucible_fresh_var "ys" (llvm_int 32);
    y1 <- crucible_fresh_var "ys" (llvm_int 32);
    y2 <- crucible_fresh_var "ys" (llvm_int 32);
    y3 <- crucible_fresh_var "ys" (llvm_int 32);
    p0 <- alloc_init (llvm_int 32) {{ y0 }};
    p1 <- alloc_init (llvm_int 32) {{ y1 }};
    p2 <- alloc_init (llvm_int 32) {{ y2 }};
    p3 <- alloc_init (llvm_int 32) {{ y3 }};

    crucible_execute_func [p0, p1, p2, p3];

    let zs = {{ quarterround [y0,y1,y2,y3] }};
    crucible_points_to p0 (crucible_term {{ zs@0 }});
    crucible_points_to p1 (crucible_term {{ zs@1 }});
    crucible_points_to p2 (crucible_term {{ zs@2 }});
    crucible_points_to p3 (crucible_term {{ zs@3 }});
};

let rowround_setup =
  oneptr_update_func "y" (llvm_array 16 (llvm_int 32)) {{ rowround }};

let columnround_setup =
  oneptr_update_func "x" (llvm_array 16 (llvm_int 32)) {{ columnround }};

let doubleround_setup =
  oneptr_update_func "x" (llvm_array 16 (llvm_int 32)) {{ doubleround }};

let salsa20_setup =
  oneptr_update_func "seq" (llvm_array 64 (llvm_int 8)) {{ Salsa20 }};

let salsa20_expansion_32 : CrucibleSetup() = do {
    (k, pk) <- ptr_to_fresh "k" (llvm_array 32 (llvm_int 8));
    (n, pn) <- ptr_to_fresh "n" (llvm_array 16 (llvm_int 8));
    (ks, pks) <- ptr_to_fresh "keystream" (llvm_array 64 (llvm_int 8));
    crucible_execute_func [pk, pn, pks];
    let rks = {{ Salsa20_expansion`{a=2}(k, n)}};
    crucible_points_to pks (crucible_term rks);
};

let s20_encrypt32 : CrucibleSetup() = do {
    (key, pkey) <- ptr_to_fresh "key" (llvm_array 32 (llvm_int 8));
    (v, pv) <- ptr_to_fresh "nonce" (llvm_array 8 (llvm_int 8));
    (m, pm) <- ptr_to_fresh "buf" (llvm_array 64 (llvm_int 8));
    r <- crucible_execute_func [ pkey
                               , pv
                               , crucible_term {{ 0 : [32] }}
                               , pm
                               , crucible_term {{ 64 : [32] }}
                               ];
    crucible_points_to pm (crucible_term {{ Salsa20_encrypt (key, v, m) }});
    crucible_equal (llvm_int 32) r (crucible_term {{ 0 : [32] }});
};

let main : TopLevel () = do {
    load_crucible_llvm_module "salsa20.bc";
    qr     <- crucible_llvm_verify "s20_quarterround" []   quarterround_setup   z3;
    rr     <- crucible_llvm_verify "s20_rowround"     [qr] rowround_setup       z3;
    cr     <- crucible_llvm_verify "s20_columnround"  [qr] columnround_setup    z3;
    dr     <- crucible_llvm_verify "s20_doubleround"  []   doubleround_setup    z3;
    s20    <- crucible_llvm_verify "s20_hash"         []   salsa20_setup        z3;
    s20e32 <- crucible_llvm_verify "s20_expand32"     []   salsa20_expansion_32 z3;
    //s20encrypt <- crucible_llvm_verify "s20_crypt32" [] s20_encrypt32 z3;
    print "Done!";
};
