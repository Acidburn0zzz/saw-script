import "Salsa20.cry";

let quarterround_setup : CrucibleSetup () = do {
    ys <- crucible_fresh_var "ys" (llvm_array 4 (llvm_int 32));
    p0 <- crucible_alloc (llvm_int 32);
    p1 <- crucible_alloc (llvm_int 32);
    p2 <- crucible_alloc (llvm_int 32);
    p3 <- crucible_alloc (llvm_int 32);

    crucible_points_to p0 (crucible_term {{ ys@0 }});
    crucible_points_to p1 (crucible_term {{ ys@1 }});
    crucible_points_to p2 (crucible_term {{ ys@2 }});
    crucible_points_to p3 (crucible_term {{ ys@3 }});

    crucible_execute_func [p0, p1, p2, p3];

    let zs = {{ quarterround ys }};
    crucible_points_to p0 (crucible_term {{ zs@0 }});
    crucible_points_to p1 (crucible_term {{ zs@1 }});
    crucible_points_to p2 (crucible_term {{ zs@2 }});
    crucible_points_to p3 (crucible_term {{ zs@3 }});
};

let rowround_setup : CrucibleSetup() = do {
    ys <- crucible_fresh_var "y" (llvm_array 16 (llvm_int 32));
    pys <- crucible_alloc (llvm_array 16 (llvm_int 32));
    crucible_points_to pys (crucible_term ys);
    crucible_execute_func [pys];
    let res = {{ rowround ys }};
    crucible_points_to pys (crucible_term res);
};

// let columnround_setup : LLVMSetup() = do {
//     llvm_ptr "x" (llvm_array 16 (llvm_int 32));
//     column <- llvm_var "*x" (llvm_array 16 (llvm_int 32));
//     llvm_ensure_eq "*x" {{ columnround column }};
//     llvm_verify_tactic abc;
// };

// let doubleround_setup : LLVMSetup() = do {
//     llvm_ptr "x" (llvm_array 16 (llvm_int 32));
//     arr <- llvm_var "*x" (llvm_array 16 (llvm_int 32));
//     llvm_ensure_eq "*x" {{ doubleround arr }};
//     llvm_verify_tactic abc;
// };

// let salsa20_setup : LLVMSetup() = do {
//     llvm_ptr "seq" (llvm_array 64 (llvm_int 8));
//     block <- llvm_var "*seq" (llvm_array 64 (llvm_int 8));
//     llvm_ensure_eq "*seq" {{ Salsa20 block }};
//     llvm_verify_tactic abc;
// };

let salsa20_expansion_32 : CrucibleSetup() = do {
    k <- crucible_fresh_var "k" (llvm_array 32 (llvm_int 8));
    n <- crucible_fresh_var "n" (llvm_array 16 (llvm_int 8));
    ks <- crucible_fresh_var "keystream" (llvm_array 64 (llvm_int 8));
    pk <- crucible_alloc (llvm_array 32 (llvm_int 8));
    pn <- crucible_alloc (llvm_array 16 (llvm_int 8));
    pks <- crucible_alloc (llvm_array 64 (llvm_int 8));
    crucible_points_to pk (crucible_term k);
    crucible_points_to pn (crucible_term n);
    crucible_points_to pks (crucible_term ks);
    crucible_execute_func [pk, pn, pks];
    let rks = {{ Salsa20_expansion`{a=2}(k, n)}};
    crucible_points_to pks (crucible_term rks);
};

// let s20_encrypt32 : LLVMSetup() = do {
//     llvm_ptr "key" (llvm_array 32 (llvm_int 8));
//     llvm_ptr "nonce" (llvm_array 8 (llvm_int 8));
//     llvm_ptr "buf" (llvm_array 64 (llvm_int 8));
//     key <-      llvm_var "*key" (llvm_array 32 (llvm_int 8));
//     v <-        llvm_var "*nonce" (llvm_array 8 (llvm_int 8));
//     m <-        llvm_var "*buf" (llvm_array 64 (llvm_int 8));
//     buflen <-   llvm_var "buflen" (llvm_int 32);
//     si <-       llvm_var "si" (llvm_int 32);
//     llvm_assert_eq "buflen" {{ 64 : [32] }};
//     llvm_assert_eq "si" {{ 0 : [32] }};
//     llvm_ensure_eq "*buf" {{ Salsa20_encrypt (key, v, m) }};
//     llvm_return {{ 0 : [32] }};
//     llvm_sat_branches true;
//     llvm_verify_tactic abc;
// };

let main : TopLevel () = do {
    load_crucible_llvm_module "salsa20.bc";
//     m <- llvm_load_module "salsa20.bc";
//     qr <- crucible_llvm_verify "s20_quarterround" [] quarterround_setup;
//     rr <- llvm_verify m "s20_rowround" [qr] rowround_setup;
     rr <- crucible_llvm_verify "s20_rowround" [] rowround_setup;
//     cr <- llvm_verify m "s20_columnround" [rr] columnround_setup;
//     dr <- llvm_verify m "s20_doubleround" [cr] doubleround_setup;
//     s20 <- llvm_verify m "s20_hash" [dr] salsa20_setup;
//     s20e32 <- llvm_verify m "s20_expand32" [s20] salsa20_expansion_32;
//    s20e32 <- crucible_llvm_verify "s20_expand32" [] salsa20_expansion_32;
//     s20encrypt <- llvm_verify m "s20_crypt32" [s20e32] s20_encrypt32;
    print "Done!";
};


// let main : TopLevel () = do {
//     m <- llvm_load_module "salsa20.bc";
//     qr <- llvm_verify m "s20_quarterround" [] quarterround_setup;
//     rr <- llvm_verify m "s20_rowround" [qr] rowround_setup;
//     cr <- llvm_verify m "s20_columnround" [rr] columnround_setup;
//     dr <- llvm_verify m "s20_doubleround" [cr] doubleround_setup;
//     s20 <- llvm_verify m "s20_hash" [dr] salsa20_setup;
//     s20e32 <- llvm_verify m "s20_expand32" [s20] salsa20_expansion_32;
//     s20encrypt <- llvm_verify m "s20_crypt32" [s20e32] s20_encrypt32;
//     print "Done!";
// };
